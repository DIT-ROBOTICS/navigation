<launch>
    <!-- choose what the mode you want. Simulation or Run Real Robot -->
    <arg name="if_real_robot" default="true" />

    <include file="$(find navigation_main)/launch/main_run.launch" >
        <arg name="if_real_robot" value="$(arg if_real_robot)" />
    </include>

    <!-- obstacle_simulation.launch -->
    <include file="$(find obstacle_simulation)/launch/obstacle_simulation.launch" unless="$(arg if_real_robot)"/>

    <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames -->
    <!-- x y z r p y -->
    <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" unless="$(arg if_real_robot)"/>

    <!-- Initial Pose and Goal Publisher -->
    <!-- Publish: /initialpose, /move_base_simple/goal -->
    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find navigation_run)/rviz/rviz_sim.rviz" unless="$(arg if_real_robot)"/>

    <!-- Map File -->
    <arg name="map_file" value="$(find map_server)/mytest/basic_map.yaml"/>

    <!-- Map Server -->
    <!-- Publish: /map, /map_metadata -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)">
        <param name="frame_id" value="map" />
    </node>

    <!-- Robot odometry simulator-->
    <!-- <node pkg="navigation_run" name="odometry" type="odom" /> -->
    <node pkg="navigation_run" name="odometry" type="odometry_sim" unless="$(arg if_real_robot)">
        <param name="tf_prefix" value="" />
    </node>

    <!-- Move Base Node -->
    <!-- Subscribe: /move_base_simple/goal -->
    <!-- Publish: /cmd_vel -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <remap from="cmd_vel" to ="vel_obseleted" />
        <!--when using pathTracker, needed to remap cmd_vel to another topic name-->

        <rosparam file="$(find navigation_run)/config/costmap_common_sim_params.yaml" command="load" ns="global_costmap" if="$(arg if_real_robot)"/>
        <rosparam file="$(find navigation_run)/config/costmap_common_sim_params.yaml" command="load" ns="local_costmap" if="$(arg if_real_robot)"/>
        <rosparam file="$(find navigation_run)/config/costmap_common_sim_params.yaml" command="load" ns="global_costmap" unless="$(arg if_real_robot)"/>
        <rosparam file="$(find navigation_run)/config/costmap_common_sim_params.yaml" command="load" ns="local_costmap" unless="$(arg if_real_robot)"/>
        <rosparam file="$(find navigation_run)/config/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find navigation_run)/config/local_costmap_params.yaml" command="load" />

        <!-- <rosparam file="$(find navigation_run)/config/base_local_planner_params.yaml" command="load" /> -->
        <rosparam file="$(find navigation_run)/config/global_planner_params.yaml" command="load" />
        <rosparam file="$(find navigation_run)/config/move_base_params.yaml" command="load" />
    </node>

    <!-- path_Tracker -->
    <node name="path_tracker" pkg="path_tracker" type="pathTracker_sim" output="screen" unless="$(arg if_real_robot)">
        <remap from="global_filter" to="odom"/>
        <remap from="cmd_vel" to="raw_cmd_vel"/>
        <remap from="nav_goal" to="path_tracker_goal"/>
        <!-- for lpf to filter the velocity -->
        <rosparam file="$(find path_tracker)/params/pathTracker_test.yaml" command="load" />
    </node>

    <!-- docking_tracker -->
    <node name="dock_tracker" pkg="path_tracker" type="dockTracker_sim" output="screen">
        <rosparam file="$(find path_tracker)/params/dockTracker.yaml" command="load" />
        <!-- 0 -> nav_msgs::Odometry -->
        <!-- 1 -> geometry_msgs::PoseWithCovarianceStamped -->
        <param name="odom_type" value="0" unless="$(arg if_real_robot)"/>
        <param name="odom_type" value="1" if="$(arg if_real_robot)"/>
        <remap from="cmd_vel" to="dock_tracker_cmd_vel"/>
        <remap from="dock_goal" to="dock_tracker_goal"/>
    
    </node>

    <!-- low pass filter on pt's cmd_vel -->
    <node pkg="lpf" type="vel_lpf" name="vel_lpf" output="screen">
        <rosparam file="$(find lpf)/params/lpf.yaml" command="load" />
        <remap from="cmd_vel" to="path_tracker_cmd_vel"/>
    </node>

</launch>
