<launch>
    <!-- Parameter -->
    <arg name="is_run" default="true" />
    <arg name="is_sim" default="false" />

    <!-- which robot -->
    <arg name="is_robot" default="true" />
    <arg name="is_robot1" default="false" />
    <arg name="is_robot2" default="false" />
    <arg name="is_rival1" default="false" />
    <arg name="is_rival2" default="false" />

    <!-- Check is rival, for distinguish state -->
    <arg name="is_rival" default="false" if="$(arg is_robot1)" />
    <arg name="is_rival" default="false" if="$(arg is_robot2)" />
    <arg name="is_rival" default="true" if="$(arg is_rival1)" />
    <arg name="is_rival" default="true" if="$(arg is_rival2)" />

    <!-- Each robot name. Note that the state is based on who am I. -->
    <arg name="robot_name" default="" if="$(arg is_robot)"/>
    <arg name="robot_name" default="/robot1" if="$(arg is_robot1)"/>
    <arg name="robot_name" default="/robot2" if="$(arg is_robot2)"/>
    <arg name="robot_name" default="/rival1" if="$(arg is_rival1)"/>
    <arg name="robot_name" default="/rival2" if="$(arg is_rival2)"/>

    <!-- The other robot name, here we regard it as an obstacle. -->
    <arg name="robot_obs_name_suffix" default="_no" if="$(arg is_run)"/>
    <arg name="robot_obs_name_suffix" default="" if="$(arg is_sim)"/>
    <arg name="robot_obs_name" default="/robot1$(arg robot_obs_name_suffix)" if="$(arg is_robot2)" />
    <arg name="robot_obs_name" default="/robot2$(arg robot_obs_name_suffix)" if="$(arg is_robot1)" />
    <arg name="robot_obs_name" default="/rival1$(arg robot_obs_name_suffix)" if="$(arg is_rival2)" />
    <arg name="robot_obs_name" default="/rival2$(arg robot_obs_name_suffix)" if="$(arg is_rival1)" />

    <arg name="rival1_name" default="/rival1" unless="$(arg is_rival)" />
    <arg name="rival1_name" default="/robot1" if="$(arg is_rival)" />
    <arg name="rival2_name" default="/rival2" unless="$(arg is_rival)" />
    <arg name="rival2_name" default="/robot2" if="$(arg is_rival)" />

    <!-- 0 -> nav_msgs::Odometry -->
    <!-- 1 -> geometry_msgs::PoseWithCovarianceStamped -->
    <!-- Remember to change the topic name. -->
    <arg name="odom_type" default="0" if="$(arg is_sim)"/>
    <arg name="odom_type" default="1" if="$(arg is_run)"/>

    <arg name="update_frequency" default="20.0" />
    <arg name="update_params" default="false" />
    <arg name="default_active" default="true"/>
    <arg name="use_dynamic_reconfigure" default="false" />

    <!-- Total Timeout = min_timeout < [(Distance to Goal) * (timeout_a) + (timeout_b)] < max_timeout -->
    <!-- (timeout_a) should be [1 / (robot velocity)] -->
    <arg name="timeout_a" default="0.0" />
    <arg name="timeout_b" default="20.0" />
    <arg name="min_timeout" default="10.0" />
    <arg name="max_timeout" default="100.0" />

    <!-- Used to determine whether odom data is timeout -->
    <arg name="odom_timeout" default="2.0" />

    <!-- Stop Distance -->
    <arg name="stop_distance" default="0.35" />

    <!-- Resend Goal when the goal is blocked and it isn't timeout yet. -->
    <!-- (1 / resend_goal_frequency) * resend_goal_time = total waiting time for resending goal.  -->
    <arg name="resend_goal_frequency" default="2.0" />
    <arg name="resend_goal_time" default="10" />

    <!-- Deny the goal if it is in the block area, surrounded by obstacles or robots. -->
    <!-- a -> Cherry dispenser to obstacle1 -->
    <!-- b -> Obstacle1 to obstacle2  -->
    <!-- c -> Obstacle2 to map edge -->
    <arg name="block_mode_distance_a" default="0.4"/>
    <arg name="block_mode_distance_b" default="0.8"/>
    <arg name="block_mode_distance_c" default="0.5"/>

    <!--  Node  -->
    <node pkg="navigation_main" name="navigation_main" type="navigation_main_node" args="navigation_main" output="screen">
        <!-- change by argument above -->
        <param name="active" type="boolean" value="$(arg default_active)" />
        <param name="timeout_a" type="double" value="$(arg timeout_a)" />
        <param name="timeout_b" type="double" value="$(arg timeout_b)" />
        <param name="min_timeout" type="double" value="$(arg min_timeout)" />
        <param name="max_timeout" type="double" value="$(arg max_timeout)" />
        <param name="update_frequency" type="double" value="$(arg update_frequency)" />
        <param name="use_dynamic_reconfigure" value="$(arg use_dynamic_reconfigure)"/>
        <param name="update_params" value="$(arg update_params)" />
        <param name="odom_type" value="$(arg odom_type)" />
        <param name="resend_goal_frequency" type="double" value="$(arg resend_goal_frequency)" />
        <param name="resend_goal_time" type="int" value="$(arg resend_goal_time)" />
        <param name="stop_distance" type="double" value="$(arg stop_distance)"/>
        <param name="odom_timeout" type="double" value="$(arg odom_timeout)" />
        <param name="block_mode_distance_a" type="double" value="$(arg block_mode_distance_a)"/>
        <param name="block_mode_distance_b" type="double" value="$(arg block_mode_distance_b)"/>
        <param name="block_mode_distance_c" type="double" value="$(arg block_mode_distance_c)"/>

        <!-- change directly in value="" -->
        <!-- robot pose -->
        <param name="robot_odom_topic" type="string" value="$(arg robot_name)/ekf_pose" if="$(arg is_run)"/>
        <param name="robot_odom_topic" type="string" value="$(arg robot_name)/odom" if="$(arg is_sim)"/>
        <!-- another robot pose -->
        <param name="robot_odom_obs_topic" type="string" value="$(arg robot_obs_name)/ekf_pose" if="$(arg is_run)"/>
        <param name="robot_odom_obs_topic" type="string" value="$(arg robot_obs_name)/odom" if="$(arg is_sim)"/>
        <!-- rival1 pose -->
        <param name="rival1_odom_topic" type="string" value="$(arg rival1_name)/odom"/>
        <!-- rival2 pose -->
        <param name="rival2_odom_topic" type="string" value="$(arg rival2_name)/odom"/>
        <!-- rival obstacle pose -->
        <param name="rival_obstacle_topic" type="string" value="/RivalObstacle" />
        <!-- goal topic -->
        <param name="robot_mission_state_topic" type="string" value="$(arg robot_name)/finishornot" />
        <param name="robot_path_tracker_goal_topic" type="string" value="$(arg robot_name)/path_tracker_goal" />
        <param name="robot_dock_tracker_goal_topic" type="string" value="$(arg robot_name)/dock_tracker_goal" />
        <!-- velocity topic  -->
        <param name="robot_cmd_vel_topic" type="string" value="$(arg robot_name)/cmd_vel" />
        <param name="robot_path_tracker_cmd_vel_topic" type="string" value="$(arg robot_name)/path_tracker_cmd_vel" />
        <param name="robot_dock_tracker_cmd_vel_topic" type="string" value="$(arg robot_name)/dock_tracker_cmd_vel" />
        <!-- with Main Function -->
        <param name="main_mission_topic" type="string" value="$(arg robot_name)/mission" />
        <param name="main_mission_state_topic" type="string" value="$(arg robot_name)/is_finish" />

    </node>


</launch>